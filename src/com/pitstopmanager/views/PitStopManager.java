/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.pitstopmanager.views;

import com.pitstopmanager.model.DriverModel;
import com.pitstopmanager.util.ValidationUtil;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author satyam
 */
public class PitStopManager extends javax.swing.JFrame {
    
    private List<DriverModel> driverList;
    private java.awt.CardLayout cardLayout;
    private final ValidationUtil validationUtil;
    //private java.awt.CardLayout cardLayout;
    
    /**
     * Creates new form PitStopManager
     */
    public PitStopManager() {
        validationUtil = new ValidationUtil();
        initComponents();
        initializeData();
        initializeLayout();
    }
    
    /**
     * Initializes the layout of the application by setting up the CardLayout
     * and adding panels for different screens. Each panel is uniquely
     * identified for easy navigation between screens.
     */
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlLoadingScreen, "LoadingScreen");
        getContentPane().add(pnlLoginScreen, "LoginScreen");
        getContentPane().add(pnlMainScreen, "MainScreen");

        //Start with the loading screen
        loadScreen("LoadingScreen");
    }
    /**
     * Initializes the application's data, including the driver list.
     * Populates the driver list with sample data for demonstration purposes.
     */
    private void initializeData() {
        driverList = new LinkedList<>();

        // Registering sample drivers
        registerDriver(new DriverModel(1, "Lewis Hamilton", 38, 17, "Mercedes", 103, 3, 50.0));
        registerDriver(new DriverModel(2, "Max Verstappen", 26, 9, "Red Bull Racing", 54, 5, 80.0));
        registerDriver(new DriverModel(3, "Charles Leclerc", 26, 6, "Ferrari", 5, 3, 60.0));
        registerDriver(new DriverModel(4, "Fernando Alonso", 42, 19, "Aston Martin", 32, 2, 70.0)); 
        registerDriver(new DriverModel(5, "Sergio Perez", 33, 9, "Red Bull Racing", 32, 2, 75.0));
        registerDriver(new DriverModel(6, "Carlos Sainz", 29, 7, "Ferrari", 25, 2, 65.0));
    }
        
    // Method to add driver data and populate the table
    private void registerDriver(DriverModel driver) {
        driverList.add(driver); // Add the driver to the list
        DefaultTableModel model = (DefaultTableModel) tblDriver.getModel();
        model.addRow(new Object[]{
            driver.getDriverId(), driver.getName(), driver.getAge(), 
            driver.getExperience(), driver.getTeam(), driver.getWins(), 
            driver.getContractDuration(), driver.getTransferFee()
        });
    }

    
    /**
     * Simulates the loading progress using a SwingWorker thread. Updates a
     * progress bar incrementally and switches to the login screen upon
     * completion.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i); // Publish progress
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgBarSplashScreen.setValue(progress);
                lblProgress.setText(Integer.toString(progress)+"%");
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }
    
    /**
     * Switches the application screen to the specified screen name.
     *
     * @param screenName The name of the screen to display.
     */
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLoginScreen = new javax.swing.JPanel();
        lblLoginRight = new javax.swing.JLabel();
        lblLoginTitle = new javax.swing.JLabel();
        lblLoginSubTitle = new javax.swing.JLabel();
        txtFldLoginUsername = new javax.swing.JTextField();
        pwdFldLogin = new javax.swing.JPasswordField();
        lblLoginForgotPwd = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lblLoginError = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        pnlMainScreen = new javax.swing.JPanel();
        pnlMainBar = new javax.swing.JPanel();
        lblMainBarLogo = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        tbMain = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnHomeView = new javax.swing.JButton();
        btnHomeAddUpdate = new javax.swing.JButton();
        pnlView = new javax.swing.JPanel();
        spnltable = new javax.swing.JScrollPane();
        tblDriver = new javax.swing.JTable();
        btnBackHome = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jtxtFDeleteId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pnlAddUpdate = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        JSpinAge = new javax.swing.JSpinner();
        lblId = new javax.swing.JLabel();
        txtFId = new javax.swing.JTextField();
        lblExperience = new javax.swing.JLabel();
        jSpinExperience = new javax.swing.JSpinner();
        lblTeam = new javax.swing.JLabel();
        txtFTeam = new javax.swing.JTextField();
        lblWins = new javax.swing.JLabel();
        lblDuration = new javax.swing.JLabel();
        lblTransferFee = new javax.swing.JLabel();
        jSpinTransferFee = new javax.swing.JSpinner();
        jSpinWins = new javax.swing.JSpinner();
        jSpinDuration = new javax.swing.JSpinner();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        pnlLoadingScreen = new javax.swing.JPanel();
        lblLoadingLogo = new javax.swing.JLabel();
        pgBarSplashScreen = new javax.swing.JProgressBar();
        lblLoading = new javax.swing.JLabel();
        lblProgress = new javax.swing.JLabel();

        pnlLoginScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoginScreen.setPreferredSize(new java.awt.Dimension(800, 600));

        lblLoginRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pitstopmanager/resources/rightSide.png"))); // NOI18N
        lblLoginRight.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pitstopmanager/resources/rightSide.png"))); // NOI18N
        lblLoginRight.setDoubleBuffered(true);

        lblLoginTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblLoginTitle.setText("Sign In to PitStop Manager");

        lblLoginSubTitle.setText("Please enter your details for logging into yout account");

        txtFldLoginUsername.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtFldLoginUsername.setText("admin");
        txtFldLoginUsername.setToolTipText("");
        txtFldLoginUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldLoginUsernameActionPerformed(evt);
            }
        });

        pwdFldLogin.setText("admin");
        pwdFldLogin.setToolTipText("");
        pwdFldLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdFldLoginActionPerformed(evt);
            }
        });

        lblLoginForgotPwd.setText("Forgot Password?");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblLoginError.setForeground(new java.awt.Color(255, 0, 0));
        lblLoginError.setText("    ");
        lblLoginError.setToolTipText("");

        lblUsername.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUsername.setText("Username");

        lblPassword.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPassword.setText("Password");

        javax.swing.GroupLayout pnlLoginScreenLayout = new javax.swing.GroupLayout(pnlLoginScreen);
        pnlLoginScreen.setLayout(pnlLoginScreenLayout);
        pnlLoginScreenLayout.setHorizontalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addComponent(btnLogin))
                            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(lblLoginError))
                            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addComponent(lblLoginForgotPwd)))
                        .addGap(0, 117, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUsername)
                            .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLoginSubTitle)
                                    .addComponent(lblLoginTitle))
                                .addComponent(txtFldLoginUsername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pwdFldLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblPassword))))
                .addGap(18, 18, 18)
                .addComponent(lblLoginRight, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlLoginScreenLayout.setVerticalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                .addComponent(lblLoginRight)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLoginTitle)
                .addGap(18, 18, 18)
                .addComponent(lblLoginSubTitle)
                .addGap(20, 20, 20)
                .addComponent(lblUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFldLoginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(lblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwdFldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLoginError)
                .addGap(13, 13, 13)
                .addComponent(lblLoginForgotPwd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLogin)
                .addGap(135, 135, 135))
        );

        pnlMainScreen.setPreferredSize(new java.awt.Dimension(800, 600));

        pnlMainBar.setBackground(new java.awt.Color(255, 255, 255));
        pnlMainBar.setVerifyInputWhenFocusTarget(false);

        lblMainBarLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pitstopmanager/resources/mainBarLogo.png"))); // NOI18N

        btnLogout.setText("LOG OUT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainBarLayout = new javax.swing.GroupLayout(pnlMainBar);
        pnlMainBar.setLayout(pnlMainBarLayout);
        pnlMainBarLayout.setHorizontalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMainBarLogo)
                .addGap(224, 224, 224)
                .addComponent(btnLogout)
                .addContainerGap(377, Short.MAX_VALUE))
        );
        pnlMainBarLayout.setVerticalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMainBarLogo))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        tbMain.setBackground(new java.awt.Color(255, 255, 255));

        pnlHome.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pitstopmanager/resources/homeIntroGrpahics.png"))); // NOI18N

        btnHomeView.setText("VIEW DRIVERS");
        btnHomeView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeViewActionPerformed(evt);
            }
        });

        btnHomeAddUpdate.setText("ADD/UPDATE DRIVERS");
        btnHomeAddUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeAddUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(btnHomeView)
                .addGap(148, 148, 148)
                .addComponent(btnHomeAddUpdate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHomeAddUpdate)
                    .addComponent(btnHomeView))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        tbMain.addTab("Home", pnlHome);

        pnlView.setBackground(new java.awt.Color(255, 255, 255));

        spnltable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        spnltable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spnltableMouseClicked(evt);
            }
        });

        tblDriver.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Driver ID", "Name ", "Age", "Experience (yrs.)", "Team", "Wins", "Contract Duration", "Transfer Fee (mils)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDriver.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblDriver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDriverMouseClicked(evt);
            }
        });
        spnltable.setViewportView(tblDriver);
        if (tblDriver.getColumnModel().getColumnCount() > 0) {
            tblDriver.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblDriver.getColumnModel().getColumn(2).setPreferredWidth(10);
            tblDriver.getColumnModel().getColumn(5).setPreferredWidth(10);
        }

        btnBackHome.setText("BACK");
        btnBackHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackHomeActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jtxtFDeleteId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtFDeleteIdActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter the ID of the Driver you want to delete");

        javax.swing.GroupLayout pnlViewLayout = new javax.swing.GroupLayout(pnlView);
        pnlView.setLayout(pnlViewLayout);
        pnlViewLayout.setHorizontalGroup(
            pnlViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spnltable, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlViewLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(btnBackHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jtxtFDeleteId, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(53, 53, 53))
        );
        pnlViewLayout.setVerticalGroup(
            pnlViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewLayout.createSequentialGroup()
                .addComponent(spnltable, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pnlViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pnlViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete)
                        .addComponent(btnBackHome)
                        .addComponent(jtxtFDeleteId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(184, 184, 184))
        );

        tbMain.addTab("View", pnlView);

        pnlAddUpdate.setBackground(new java.awt.Color(255, 255, 255));
        pnlAddUpdate.setPreferredSize(new java.awt.Dimension(800, 600));
        pnlAddUpdate.setVerifyInputWhenFocusTarget(false);

        lblName.setText("Driver Name ");

        txtFName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFNameActionPerformed(evt);
            }
        });

        lblAge.setText("Age");

        JSpinAge.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        JSpinAge.setName(""); // NOI18N

        lblId.setText("Driver ID");

        txtFId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFIdActionPerformed(evt);
            }
        });

        lblExperience.setText("Experience in (Years)");

        jSpinExperience.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSpinExperience.setName(""); // NOI18N

        lblTeam.setText("Team");

        txtFTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFTeamActionPerformed(evt);
            }
        });

        lblWins.setText("Total number of Wins");

        lblDuration.setText("Contract Duration (in Years)");

        lblTransferFee.setText("Transfer Fee (in mils)");

        jSpinTransferFee.setAutoscrolls(true);
        jSpinTransferFee.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSpinTransferFee.setName(""); // NOI18N
        jSpinTransferFee.setOpaque(true);

        jSpinWins.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSpinWins.setName(""); // NOI18N

        jSpinDuration.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSpinDuration.setName(""); // NOI18N

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAddUpdateLayout = new javax.swing.GroupLayout(pnlAddUpdate);
        pnlAddUpdate.setLayout(pnlAddUpdateLayout);
        pnlAddUpdateLayout.setHorizontalGroup(
            pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddUpdateLayout.createSequentialGroup()
                        .addComponent(lblExperience)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jSpinExperience, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddUpdateLayout.createSequentialGroup()
                        .addComponent(lblAge)
                        .addGap(62, 62, 62)
                        .addComponent(JSpinAge))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddUpdateLayout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFName))
                    .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                        .addComponent(lblId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFId, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                        .addComponent(lblTeam)
                        .addGap(54, 54, 54)
                        .addComponent(txtFTeam)))
                .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                                .addComponent(lblTransferFee)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSpinTransferFee, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                                .addComponent(lblDuration)
                                .addGap(27, 27, 27)
                                .addComponent(jSpinDuration, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                            .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                                .addComponent(lblWins)
                                .addGap(59, 59, 59)
                                .addComponent(jSpinWins)))
                        .addGap(140, 140, 140))
                    .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(btnAdd)
                        .addGap(84, 84, 84)
                        .addComponent(btnUpdate)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlAddUpdateLayout.setVerticalGroup(
            pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddUpdateLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtFId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWins)
                    .addComponent(jSpinWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDuration)
                    .addComponent(jSpinDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge)
                    .addComponent(JSpinAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTransferFee)
                    .addComponent(jSpinTransferFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblExperience, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinExperience, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate))
                .addGap(18, 18, 18)
                .addGroup(pnlAddUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTeam)
                    .addComponent(txtFTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(296, Short.MAX_VALUE))
        );

        tbMain.addTab("Add/Update", pnlAddUpdate);

        javax.swing.GroupLayout pnlMainScreenLayout = new javax.swing.GroupLayout(pnlMainScreen);
        pnlMainScreen.setLayout(pnlMainScreenLayout);
        pnlMainScreenLayout.setHorizontalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlMainBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbMain, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlMainScreenLayout.setVerticalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMainBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbMain, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tbMain.getAccessibleContext().setAccessibleName("Home");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        pnlLoadingScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoadingScreen.setPreferredSize(new java.awt.Dimension(800, 600));

        lblLoadingLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pitstopmanager/resources/logo_big.png"))); // NOI18N

        pgBarSplashScreen.setBackground(new java.awt.Color(220, 0, 0));
        pgBarSplashScreen.setForeground(new java.awt.Color(220, 0, 0));

        lblLoading.setText("Loading ....");

        lblProgress.setForeground(new java.awt.Color(220, 0, 0));
        lblProgress.setText("0 %");

        javax.swing.GroupLayout pnlLoadingScreenLayout = new javax.swing.GroupLayout(pnlLoadingScreen);
        pnlLoadingScreen.setLayout(pnlLoadingScreenLayout);
        pnlLoadingScreenLayout.setHorizontalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addGroup(pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                        .addComponent(lblLoading)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblProgress))
                    .addGroup(pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(280, Short.MAX_VALUE))
        );
        pnlLoadingScreenLayout.setVerticalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(lblLoadingLogo)
                .addGap(13, 13, 13)
                .addGroup(pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoading)
                    .addComponent(lblProgress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(826, 619));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtFldLoginUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldLoginUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldLoginUsernameActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Get the username and password input
        String username = txtFldLoginUsername.getText();
        String password = new String(pwdFldLogin.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            lblLoginError.setText("Please enter your username and password.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            lblLoginError.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            lblLoginError.setText("    "); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void pwdFldLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdFldLoginActionPerformed
        
    }//GEN-LAST:event_pwdFldLoginActionPerformed

    private void txtFNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFNameActionPerformed

    private void txtFIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFIdActionPerformed

    private void txtFTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFTeamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFTeamActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            // Retrieve input data from UI fields
            String driverIdText = txtFId.getText().trim();
            String name = txtFName.getText().trim();
            String ageText = JSpinAge.getValue().toString();
            String experienceText = jSpinExperience.getValue().toString();
            String team = txtFTeam.getText().trim().toLowerCase();
            String winsText = jSpinWins.getValue().toString();
            String contractDurationText = jSpinDuration.getValue().toString();
            String transferFeeText = jSpinTransferFee.getValue().toString();

            // Check if any field is empty
            if (ValidationUtil.isNullOrEmpty(driverIdText) || ValidationUtil.isNullOrEmpty(name) ||
                ValidationUtil.isNullOrEmpty(ageText) || ValidationUtil.isNullOrEmpty(experienceText) ||
                ValidationUtil.isNullOrEmpty(team) || ValidationUtil.isNullOrEmpty(winsText) ||
                ValidationUtil.isNullOrEmpty(contractDurationText) || ValidationUtil.isNullOrEmpty(transferFeeText)) {
                JOptionPane.showMessageDialog(this, "All fields are required. Please fill out every field.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Parse input data
            int driverId = Integer.parseInt(driverIdText);
            int age = Integer.parseInt(ageText);
            int experience = Integer.parseInt(experienceText);
            int wins = Integer.parseInt(winsText);
            int contractDuration = Integer.parseInt(contractDurationText);
            double transferFee = Double.parseDouble(transferFeeText);



            // Declare and initialize the existingTeams array with Formula 1 team names
            List<String> existingTeams = List.of(
                "mercedes", 
                "ferrari", 
                "red bull racing", 
                "mclaren", 
                "alpine", 
                "aston martin", 
                "alfa romeo", 
                "haas", 
                "alphatauri", 
                "williams"
            );
            
                // Check if the driver ID already exists in the list
                DriverModel existingDriver = driverList.stream()
                    .filter(driver -> driver.getDriverId() == driverId)
                    .findFirst()
                    .orElse(null);

                if (existingDriver != null) {
                    JOptionPane.showMessageDialog(this, "Driver ID " + driverId + " already exists. Please use a different ID.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            
            // Create a new DriverModel object
            DriverModel driver = new DriverModel(driverId, name, age, experience, team, wins, contractDuration, transferFee);
            
            // Check if the team name is valid (must be an exact match with one of the existing teams)
            if (!existingTeams.contains(team)) {
                StringBuilder errorMessage = new StringBuilder();
                errorMessage.append("Invalid team name. Team must be one of the following:\n\n");
                for (String validTeam : existingTeams) {
                    errorMessage.append("• ").append(validTeam).append("\n");
                }
                JOptionPane.showMessageDialog(this, errorMessage.toString(), "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate driver attributes using ValidationUtil
            if (!ValidationUtil.isValidId(driverId)) {
                JOptionPane.showMessageDialog(this, "Invalid driver ID.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidName(name)) {
                JOptionPane.showMessageDialog(this, "Invalid name. Only alphabets and spaces are allowed.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidAge(age)) {
                JOptionPane.showMessageDialog(this, "Invalid age. Age must be between 18 and 70.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidExperience(experience)) {
                JOptionPane.showMessageDialog(this, "Invalid experience. Experience cannot be negative.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidTeam(team, existingTeams)) {
                JOptionPane.showMessageDialog(this, "Invalid team name. It must be alphanumeric and not already exist.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidWins(wins)) {
                JOptionPane.showMessageDialog(this, "Invalid number of wins. Wins cannot be negative.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidContractDuration(contractDuration)) {
                JOptionPane.showMessageDialog(this, "Invalid contract duration. It must be between 1 and 10 years.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidTransferFee(transferFee)) {
                JOptionPane.showMessageDialog(this, "Invalid transfer fee. It must be between 0.5 and 200 million.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Add the validated driver
            registerDriver(driver);

            // Clear input fields after successful addition
            txtFId.setText("");
            txtFName.setText("");
            txtFTeam.setText("");
            JSpinAge.setValue(18); // Reset JSpinner to default value
            jSpinExperience.setValue(0); // Reset JSpinner to default value
            jSpinWins.setValue(0); // Reset JSpinner to default value
            jSpinDuration.setValue(1); // Reset JSpinner to default value
            jSpinTransferFee.setValue(0.5); // Reset JSpinner to default value

            // Display success message
            JOptionPane.showMessageDialog(this, "Driver added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please check your entries.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void jtxtFDeleteIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtFDeleteIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtFDeleteIdActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        pwdFldLogin.setText("");
        txtFldLoginUsername.setText("");
        loadScreen("LoginScreen"); 
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnBackHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackHomeActionPerformed
        tbMain.setSelectedComponent(pnlHome);
    }//GEN-LAST:event_btnBackHomeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
                    
        // Retrieve the driver ID from the text field
        String inputId = jtxtFDeleteId.getText().trim();

        // Validate input
        if (ValidationUtil.isNullOrEmpty(inputId)) {
            JOptionPane.showMessageDialog(this, "Driver ID cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int driverId;
        try {
            driverId = Integer.parseInt(inputId);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Driver ID. Please enter a valid number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!ValidationUtil.isValidId(driverId)) {
            JOptionPane.showMessageDialog(this, "Invalid Driver ID. ID must be positive.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the driver exists in the list
        DriverModel driverToDelete = driverList.stream()
            .filter(driver -> driver.getDriverId() == driverId)
            .findFirst()
            .orElse(null);

        if (driverToDelete == null) {
            JOptionPane.showMessageDialog(this, "Driver with ID " + driverId + " does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion with the user
        int confirmation = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete the driver with ID: " + driverId + "?", 
            "Delete Confirmation", 
            JOptionPane.YES_NO_OPTION);

        if (confirmation != JOptionPane.YES_OPTION) {
            // User canceled deletion
            return;
        }

        // Remove the driver from the list
        driverList.remove(driverToDelete);

        // Update the table to reflect the changes
        loadListToTable(driverList);

        // Clear the delete ID field
        jtxtFDeleteId.setText("");

        // Show success message
        JOptionPane.showMessageDialog(this, "Driver deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            // Retrieve input data from UI fields
            String driverIdText = txtFId.getText().trim();
            String name = txtFName.getText().trim();
            String ageText = JSpinAge.getValue().toString();
            String experienceText = jSpinExperience.getValue().toString();
            String team = txtFTeam.getText().trim().toLowerCase();
            String winsText = jSpinWins.getValue().toString();
            String contractDurationText = jSpinDuration.getValue().toString();
            String transferFeeText = jSpinTransferFee.getValue().toString();

            // Check if any field is empty
            if (ValidationUtil.isNullOrEmpty(driverIdText) || ValidationUtil.isNullOrEmpty(name) ||
                ValidationUtil.isNullOrEmpty(ageText) || ValidationUtil.isNullOrEmpty(experienceText) ||
                ValidationUtil.isNullOrEmpty(team) || ValidationUtil.isNullOrEmpty(winsText) ||
                ValidationUtil.isNullOrEmpty(contractDurationText) || ValidationUtil.isNullOrEmpty(transferFeeText)) {
                JOptionPane.showMessageDialog(this, "All fields are required. Please fill out every field.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Parse input data
            int driverId = Integer.parseInt(driverIdText);
            int age = Integer.parseInt(ageText);
            int experience = Integer.parseInt(experienceText);
            int wins = Integer.parseInt(winsText);
            int contractDuration = Integer.parseInt(contractDurationText);
            double transferFee = Double.parseDouble(transferFeeText);

            // Declare and initialize the existingTeams array with Formula 1 team names
            List<String> existingTeams = List.of(
                "mercedes", 
                "ferrari", 
                "red bull racing", 
                "mclaren", 
                "alpine", 
                "aston martin", 
                "alfa romeo", 
                "haas", 
                "alphatauri", 
                "williams"
            );

            // Check if the team name is valid (must be an exact match with one of the existing teams)
            if (!existingTeams.contains(team)) {
                StringBuilder errorMessage = new StringBuilder();
                errorMessage.append("Invalid team name. Team must be one of the following:\n\n");
                for (String validTeam : existingTeams) {
                    errorMessage.append("• ").append(validTeam).append("\n");
                }
                JOptionPane.showMessageDialog(this, errorMessage.toString(), "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Create a new DriverModel object with updated data
            DriverModel updatedDriver = new DriverModel(driverId, name, age, experience, team, wins, contractDuration, transferFee);

            // Validate driver attributes using ValidationUtil
            if (!ValidationUtil.isValidId(driverId)) {
                JOptionPane.showMessageDialog(this, "Invalid driver ID.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidName(name)) {
                JOptionPane.showMessageDialog(this, "Invalid name. Only alphabets and spaces are allowed.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidAge(age)) {
                JOptionPane.showMessageDialog(this, "Invalid age. Age must be between 18 and 70.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidExperience(experience)) {
                JOptionPane.showMessageDialog(this, "Invalid experience. Experience cannot be negative.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidWins(wins)) {
                JOptionPane.showMessageDialog(this, "Invalid number of wins. Wins cannot be negative.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidContractDuration(contractDuration)) {
                JOptionPane.showMessageDialog(this, "Invalid contract duration. It must be between 1 and 10 years.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!ValidationUtil.isValidTransferFee(transferFee)) {
                JOptionPane.showMessageDialog(this, "Invalid transfer fee. It must be between 0.5 and 200 million.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Find the driver to update in the list
            int driverIndex = -1;
            for (int i = 0; i < driverList.size(); i++) {
                if (driverList.get(i).getDriverId() == driverId) {
                    driverIndex = i;
                    break;
                }
            }

            if (driverIndex == -1) {
                JOptionPane.showMessageDialog(this, "Driver with ID " + driverId + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Confirm update with the user
            int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to update the driver with ID: " + driverId + "?",
                "Update Confirmation",
                JOptionPane.YES_NO_OPTION);

            if (confirmation != JOptionPane.YES_OPTION) {
                // User canceled update
                return;
            }

            // Update the driver in the list
            driverList.set(driverIndex, updatedDriver);

            // Refresh the table
            loadListToTable(driverList);

            // Clear input fields after successful update
            txtFId.setText("");
            txtFName.setText("");
            txtFTeam.setText("");
            JSpinAge.setValue(18); // Reset JSpinner to default value
            jSpinExperience.setValue(0); // Reset JSpinner to default value
            jSpinWins.setValue(0); // Reset JSpinner to default value
            jSpinDuration.setValue(1); // Reset JSpinner to default value
            jSpinTransferFee.setValue(0.5); // Reset JSpinner to default value

            // Display success message
            JOptionPane.showMessageDialog(this, "Driver updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please check your entries.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void spnltableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spnltableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_spnltableMouseClicked

    private void tblDriverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDriverMouseClicked
                                      
        // Check for a double-click event
        if (evt.getClickCount() == 2) {
            int selectedRow = tblDriver.getSelectedRow(); // Get the selected row index

            // Check if a valid row is selected
            if (selectedRow != -1) {
                // Prompt the user for action
                int choice = JOptionPane.showOptionDialog(
                        this,
                        "What action would you like to perform?",
                        "Row Action",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        new Object[]{"Update", "Delete"},
                        null
                );

                if (choice == JOptionPane.YES_OPTION) {
                    // User chose to update the row
                    DriverModel selectedDriver = driverList.get(selectedRow);

                    // Populate the fields with the selected driver's data
                    txtFId.setText(String.valueOf(selectedDriver.getDriverId()));
                    txtFName.setText(selectedDriver.getName());
                    JSpinAge.setValue(selectedDriver.getAge());
                    jSpinExperience.setValue(selectedDriver.getExperience());
                    txtFTeam.setText(selectedDriver.getTeam());
                    jSpinWins.setValue(selectedDriver.getWins());
                    jSpinDuration.setValue(selectedDriver.getContractDuration());
                    jSpinTransferFee.setValue(selectedDriver.getTransferFee());
                    
                    tbMain.setSelectedComponent(pnlAddUpdate);
                    JOptionPane.showMessageDialog(this, "Driver data loaded for update. Modify fields and click 'Update'.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    
                } else if (choice == JOptionPane.NO_OPTION) {
                    // Confirm deletion
                    int result_delete = JOptionPane.showOptionDialog(
                            this,
                            "Are you sure you want to delete this driver?",
                            "Delete Confirmation",
                            JOptionPane.DEFAULT_OPTION,
                            JOptionPane.WARNING_MESSAGE,
                            null,
                            new String[]{"Delete", "Cancel"},
                            null
                    );

                    if (result_delete == 0) {
                        // Remove the driver from the list
                        driverList.remove(selectedRow);

                        // Refresh the table
                        loadListToTable(driverList);

                        JOptionPane.showMessageDialog(this, "Driver deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No row selected. Please double-click on a valid row.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tblDriverMouseClicked

    private void btnHomeViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeViewActionPerformed
        tbMain.setSelectedComponent(pnlView);
    }//GEN-LAST:event_btnHomeViewActionPerformed

    private void btnHomeAddUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeAddUpdateActionPerformed
        tbMain.setSelectedComponent(pnlAddUpdate);
    }//GEN-LAST:event_btnHomeAddUpdateActionPerformed
    
    /**
     * Populates the JTable with the current list of student records. Clears
     * existing rows in the table model before adding new data.
     */
    private void loadListToTable(List<DriverModel> studentList) {
        DefaultTableModel model = (DefaultTableModel) tblDriver.getModel();

        // Clear existing rows if needed
        model.setRowCount(0);

        // Populate the table with student data
        studentList.forEach(driver -> model.addRow(new Object[]{
            driver.getDriverId(),
            driver.getName(),
            driver.getAge(),
            driver.getExperience(),
            driver.getTeam(),
            driver.getWins(),
            driver.getContractDuration(),
            driver.getTransferFee()            
        }));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PitStopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PitStopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PitStopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PitStopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        PitStopManager app = new PitStopManager();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);
        });

        app.startProgress();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner JSpinAge;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBackHome;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnHomeAddUpdate;
    private javax.swing.JButton btnHomeView;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner jSpinDuration;
    private javax.swing.JSpinner jSpinExperience;
    private javax.swing.JSpinner jSpinTransferFee;
    private javax.swing.JSpinner jSpinWins;
    private javax.swing.JTextField jtxtFDeleteId;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblDuration;
    private javax.swing.JLabel lblExperience;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblLoading;
    private javax.swing.JLabel lblLoadingLogo;
    private javax.swing.JLabel lblLoginError;
    private javax.swing.JLabel lblLoginForgotPwd;
    private javax.swing.JLabel lblLoginRight;
    private javax.swing.JLabel lblLoginSubTitle;
    private javax.swing.JLabel lblLoginTitle;
    private javax.swing.JLabel lblMainBarLogo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblProgress;
    private javax.swing.JLabel lblTeam;
    private javax.swing.JLabel lblTransferFee;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblWins;
    private javax.swing.JProgressBar pgBarSplashScreen;
    private javax.swing.JPanel pnlAddUpdate;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlLoadingScreen;
    private javax.swing.JPanel pnlLoginScreen;
    private javax.swing.JPanel pnlMainBar;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JPanel pnlView;
    private javax.swing.JPasswordField pwdFldLogin;
    private javax.swing.JScrollPane spnltable;
    private javax.swing.JTabbedPane tbMain;
    private javax.swing.JTable tblDriver;
    private javax.swing.JTextField txtFId;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtFTeam;
    private javax.swing.JTextField txtFldLoginUsername;
    // End of variables declaration//GEN-END:variables
}
